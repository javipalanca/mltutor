import base64
import pickle
import io

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.inspection import DecisionBoundaryDisplay
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor, plot_tree, export_text

from dataset.dataset_manager import load_data, preprocess_data
from algorithms.model_training import train_decision_tree
from algorithms.model_evaluation import (
    evaluate_classification_model,
    evaluate_regression_model,
    show_detailed_evaluation,
)
from utils import create_info_box, get_image_download_link, show_code_with_download
from dataset.dataset_tab import run_dataset_tab, run_select_dataset
from algorithms.code_examples import (
    DECISION_BOUNDARY_CODE,
    VIZ_TREE_CODE,
    TEXT_TREE_CODE,
    generate_decision_boundary_code,
    generate_tree_model_export_code,
)
from algorithms.export import display_tree_export_options
from viz.tree_visualizer import get_tree_text
from viz.decision_boundary import plot_decision_boundary, plot_decision_surface
from viz.roc import plot_roc_curve
from viz.residual import plot_predictions, plot_residuals
from viz.features import display_feature_importance
from ui import create_button_panel, create_prediction_interface




def run_decision_trees_app():
    """Ejecuta la aplicaci√≥n espec√≠fica de √°rboles de decisi√≥n."""
    st.header("üå≤ √Årboles de Decisi√≥n")
    st.markdown("Aprende sobre los √°rboles de decisi√≥n de forma interactiva")

    # Informaci√≥n sobre √°rboles de decisi√≥n
    with st.expander("‚ÑπÔ∏è ¬øQu√© son los √Årboles de Decisi√≥n?", expanded=False):
        st.markdown("""
        Los √°rboles de decisi√≥n son algoritmos de aprendizaje supervisado que se pueden usar tanto para tareas de clasificaci√≥n como de regresi√≥n.

        **Caracter√≠sticas principales:**
        - Funcionan dividiendo el conjunto de datos en subconjuntos m√°s peque√±os bas√°ndose en condiciones sobre las caracter√≠sticas
        - Son f√°ciles de interpretar y visualizar
        - Pueden manejar tanto datos num√©ricos como categ√≥ricos
        - No requieren escalado de datos

        **Limitaciones:**
        - Pueden sobreajustarse f√°cilmente (esto se puede controlar con par√°metros como max_depth)
        - Pueden ser inestables (peque√±os cambios en los datos pueden generar √°rboles muy diferentes)
        - No son tan precisos como algoritmos m√°s complejos para algunas tareas

        Experimenta con diferentes configuraciones para ver c√≥mo afectan al rendimiento del modelo.
        """)

    # Variables para almacenar datos
    dataset_loaded = False
    X, y, feature_names, class_names, dataset_info, task_type = None, None, None, None, None, None

    # Inicializar el estado de la pesta√±a activa si no existe
    if 'active_tab' not in st.session_state:
        st.session_state.active_tab = 0

    # Crear pesta√±as para organizar la informaci√≥n
    tab_options = [
        "üìä Datos",
        "üèãÔ∏è Entrenamiento",
        "üìà Evaluaci√≥n",
        "üìâ Visualizaci√≥n",
        "üîç Caracter√≠sticas",
        "üîÆ Predicciones",
        "üíæ Exportar"
    ]

    # Crear contenedor para los botones de las pesta√±as
    tab_cols = st.columns(len(tab_options))

    # Estilo CSS para los botones de pesta√±as (Decision Trees)
    st.markdown("""
    <style>
    div.tab-button-dt > button {
        border-radius: 4px 4px 0 0;
        padding: 10px;
        width: 100%;
        white-space: nowrap;
        background-color: #F0F2F6;
        border-bottom: 2px solid #E0E0E0;
        color: #333333;
    }
    div.tab-button-dt-active > button {
        background-color: #E3F2FD !important;
        border-bottom: 2px solid #1E88E5 !important;
        font-weight: bold !important;
        color: #1E88E5 !important;
    }
    div.tab-button-dt > button:hover {
        background-color: #E8EAF6;
    }
    </style>
    """, unsafe_allow_html=True)

    # Crear botones para las pesta√±as
    for i, (tab_name, col) in enumerate(zip(tab_options, tab_cols)):
        button_key = f"tab_{i}"
        button_style = "tab-button-dt-active" if st.session_state.active_tab == i else "tab-button-dt"

    # Crear botones para las pesta√±as
    for i, (tab_name, col) in enumerate(zip(tab_options, tab_cols)):
        button_key = f"tab_{i}"
        button_style = "tab-button-dt-active" if st.session_state.active_tab == i else "tab-button-dt"
        is_active = st.session_state.active_tab == i

        with col:
            st.markdown(f"<div class='{button_style}'>",
                        unsafe_allow_html=True)
            # Usar type="primary" para el bot√≥n activo
            if st.button(tab_name, key=button_key, use_container_width=True,
                         type="primary" if is_active else "secondary"):
                st.session_state.active_tab = i
                st.rerun()
            st.markdown("</div>", unsafe_allow_html=True)

    # Separador visual
    st.markdown("---")

    ###########################################
    #     Pesta√±a de Datos                    #
    ###########################################

    run_dataset_tab(st.session_state.active_tab)

    ###########################################
    # Pesta√±a de Entrenamiento                #
    ###########################################

    if st.session_state.active_tab == 1:
        st.header("Configuraci√≥n del Modelo")

        # Inicializar session state variables
        if 'dataset_option' not in st.session_state:
            st.session_state.dataset_option = st.session_state.selected_dataset
        if 'tree_type' not in st.session_state:
            st.session_state.tree_type = "Clasificaci√≥n"
        if 'is_trained' not in st.session_state:
            st.session_state.is_trained = False

        # Cargar datos para la vista previa si cambia el dataset o si no se ha cargado
        if st.session_state.selected_dataset != st.session_state.dataset_option or not dataset_loaded:
            try:
                X, y, feature_names, class_names, dataset_info, task_type = load_data(
                    st.session_state.selected_dataset)

                st.session_state.dataset_option = st.session_state.selected_dataset
                dataset_loaded = True
                st.session_state.class_names = class_names

                # Mostrar informaci√≥n del dataset
                st.markdown("### Informaci√≥n del Dataset")
                st.markdown(create_info_box(dataset_info),
                            unsafe_allow_html=True)

                # Usar el tipo de tarea detectado por la funci√≥n load_data
                st.markdown("### Tipo de √Årbol de Decisi√≥n")

                # Usar botones en lugar de radio para seleccionar el tipo de √°rbol
                tipo_col1, tipo_col2 = st.columns(2)

                with tipo_col1:
                    is_classification = True
                    if "tree_type" in st.session_state:
                        is_classification = st.session_state.tree_type == "Clasificaci√≥n"

                    if st.button("üè∑Ô∏è Clasificaci√≥n",
                                 key="btn_classification",
                                 type="primary" if is_classification else "secondary",
                                 use_container_width=True,
                                 help="Para predecir categor√≠as o clases"):
                        tree_type = "Clasificaci√≥n"
                        st.session_state.tree_type = tree_type
                        st.rerun()

                with tipo_col2:
                    is_regression = False
                    if "tree_type" in st.session_state:
                        is_regression = st.session_state.tree_type == "Regresi√≥n"

                    if st.button("üìà Regresi√≥n",
                                 key="btn_regression",
                                 type="primary" if is_regression else "secondary",
                                 use_container_width=True,
                                 help="Para predecir valores num√©ricos continuos"):
                        tree_type = "Regresi√≥n"
                        st.session_state.tree_type = tree_type
                        st.rerun()

                # Obtener el valor actual del tipo de √°rbol
                tree_type = st.session_state.get('tree_type', task_type)

                # Si no hay tree_type definido, usar el detectado
                if 'tree_type' not in st.session_state:
                    st.session_state.tree_type = task_type

                # Mostrar advertencia si la selecci√≥n no coincide con el tipo de tarea detectado
                if tree_type != task_type:
                    st.warning(
                        f"Este dataset parece ser m√°s adecuado para {task_type}. La selecci√≥n actual podr√≠a no ofrecer resultados √≥ptimos.")

            except Exception as e:
                st.error(f"Error al cargar el dataset: {str(e)}")
                dataset_loaded = False

        # Par√°metros del modelo
        st.markdown("### Par√°metros del Modelo")

        col1, col2 = st.columns(2)

        with col1:
            criterion = st.selectbox(
                "Criterio de Divisi√≥n:",
                ["gini", "entropy"] if st.session_state.get('tree_type', 'Clasificaci√≥n') == "Clasificaci√≥n" else [
                    "squared_error", "friedman_mse", "absolute_error"],
                index=0,
                help="Medida de la calidad de una divisi√≥n. Gini o Entropy para clasificaci√≥n, MSE para regresi√≥n."
            )

            max_depth = st.slider(
                "Profundidad M√°xima:",
                min_value=1,
                max_value=10,
                value=3,
                help="La profundidad m√°xima del √°rbol. A mayor profundidad, m√°s complejo el modelo."
            )

        with col2:
            min_samples_split = st.slider(
                "Muestras M√≠nimas para Divisi√≥n:",
                min_value=2,
                max_value=10,
                value=2,
                help="N√∫mero m√≠nimo de muestras para dividir un nodo."
            )

            test_size = st.slider(
                "Tama√±o del Conjunto de Prueba:",
                min_value=0.1,
                max_value=0.5,
                value=0.3,
                step=0.05,
                help="Proporci√≥n de datos que se usar√° para evaluar el modelo."
            )

        # Guardar par√°metros en el estado de la sesi√≥n
        st.session_state.criterion = criterion
        st.session_state.max_depth = max_depth
        st.session_state.min_samples_split = min_samples_split
        st.session_state.test_size = test_size

        # Bot√≥n para entrenar el modelo
        train_button = st.button("Entrenar Modelo", type="primary")

        if train_button:
            with st.spinner("Entrenando modelo..."):
                try:
                    # Cargar y preprocesar datos
                    X, y, feature_names, class_names, dataset_info, task_type = load_data(
                        st.session_state.selected_dataset)

                    X_train, X_test, y_train, y_test = preprocess_data(
                        X, y, test_size=test_size)

                    # Entrenar el modelo
                    tree_model = train_decision_tree(
                        X_train, y_train,
                        criterion=criterion,
                        max_depth=max_depth,
                        min_samples_split=min_samples_split,
                        tree_type=tree_type
                    )

                    # Guardar en el estado de la sesi√≥n
                    st.session_state.tree_model = tree_model
                    st.session_state.X_train = X_train
                    st.session_state.X_test = X_test
                    st.session_state.y_train = y_train
                    st.session_state.y_test = y_test
                    st.session_state.feature_names = feature_names
                    st.session_state.class_names = class_names
                    st.session_state.dataset_info = dataset_info
                    st.session_state.is_trained = True

                    st.success(
                        "¬°Modelo entrenado con √©xito! Ahora puedes explorar las otras pesta√±as.")

                    # Sugerir ir a la pesta√±a de visualizaci√≥n
                    st.info(
                        "üëâ Ve a la pesta√±a 'üå≤ Visualizaci√≥n' para ver el √°rbol generado.")

                except Exception as e:
                    st.error(f"Error al entrenar el modelo: {str(e)}")

    ###########################################
    # Pesta√±a de Evaluaci√≥n                   #
    ###########################################
    elif st.session_state.active_tab == 2:
        st.header("Evaluaci√≥n del Modelo")

        if not st.session_state.get('is_trained', False):
            st.warning(
                "Primero debes entrenar un modelo en la pesta√±a 'üèãÔ∏è Entrenamiento'.")
        else:
            # Obtener predicciones del modelo
            y_pred = st.session_state.tree_model.predict(
                st.session_state.X_test)

            # Mostrar evaluaci√≥n detallada del modelo
            show_detailed_evaluation(
                st.session_state.y_test,
                y_pred,
                st.session_state.class_names if st.session_state.get(
                    'tree_type', 'Clasificaci√≥n') == "Clasificaci√≥n" else None,
                st.session_state.get('tree_type', 'Clasificaci√≥n')
            )

    ###########################################
    # Pesta√±a de Visualizaci√≥n                #
    ###########################################

    elif st.session_state.active_tab == 3:
        st.header("Visualizaci√≥n del √Årbol")

        if not st.session_state.get('is_trained', False):
            st.warning(
                "Primero debes entrenar un modelo en la pesta√±a 'üèãÔ∏è Entrenamiento'.")
        else:
            # Configuraci√≥n de la visualizaci√≥n
            st.markdown("### Tipo de visualizaci√≥n")

            # Usar botones para seleccionar el tipo de visualizaci√≥n
            viz_options = [
                ("üå≤ √Årbol", "√Årbol", "viz_tree"),
                ("üìù Texto", "Texto", "viz_text")
            ]

            # Determinar qu√© opciones est√°n disponibles
            if st.session_state.get('tree_type', 'Clasificaci√≥n') == "Clasificaci√≥n":
                viz_options.append(
                    ("üåà Frontera de Decisi√≥n", "Frontera", "viz_boundary"))
                viz_options.append(("üìâ Curva ROC", "ROC", "viz_roc"))
            else:
                viz_options.append(
                    ("üìà An√°lisis de Residuos", "Residuos", "viz_residuals"))
                viz_options.append(
                    ("üåê Superficie de Decisi√≥n", "Superficie", "viz_surface"))

            viz_type = create_button_panel(viz_options)

            # Mostrar la visualizaci√≥n seg√∫n el tipo seleccionado
            if viz_type == "√Årbol":
                # Opciones de tama√±o para la visualizaci√≥n
                col1, col2 = st.columns(2)
                with col1:
                    fig_width = st.slider("Ancho de figura:", 8, 20, 14)

                with col2:
                    fig_height = st.slider("Alto de figura:", 6, 15, 10)

                # Visualizaci√≥n est√°ndar de scikit-learn
                fig, ax = plt.subplots(figsize=(fig_width, fig_height))

                plot_tree(
                    st.session_state.tree_model,
                    feature_names=st.session_state.feature_names,
                    class_names=st.session_state.class_names if st.session_state.tree_type == "Clasificaci√≥n" else None,
                    filled=True,
                    rounded=True,
                    ax=ax,
                    proportion=True,
                    impurity=True
                )

                # Mostrar con tama√±o reducido pero expandible
                col1, col2, col3 = st.columns([1, 4, 1])
                with col2:
                    st.pyplot(fig, use_container_width=True)

                # Enlace para descargar
                st.markdown(
                    get_image_download_link(
                        fig, "arbol_decision", "üì• Descargar visualizaci√≥n del √°rbol"),
                    unsafe_allow_html=True
                )

                # Mostrar c√≥digo para generar esta visualizaci√≥n
                code_tree = VIZ_TREE_CODE

                show_code_with_download(
                    code_tree, "C√≥digo para visualizar el √°rbol", "visualizar_arbol.py")

            elif viz_type == "Texto":
                # Obtener representaci√≥n de texto
                tree_text = get_tree_text(
                    st.session_state.tree_model,
                    st.session_state.feature_names,
                )

                # Mostrar en un √°rea de texto
                st.text(tree_text)

                # Bot√≥n para descargar
                text_bytes = tree_text.encode()
                b64 = base64.b64encode(text_bytes).decode()
                href = f'<a href="data:text/plain;base64,{b64}" download="arbol_texto.txt">üì• Descargar texto del √°rbol</a>'
                st.markdown(href, unsafe_allow_html=True)

                # Mostrar c√≥digo para generar esta visualizaci√≥n
                code_text = TEXT_TREE_CODE

                show_code_with_download(
                    code_text, "C√≥digo para obtener el texto del √°rbol", "texto_arbol.py")

            elif viz_type == "Frontera":
                # Verificar que es un modelo de clasificaci√≥n y que est√° entrenado
                if not st.session_state.get('is_trained', False):
                    st.warning(
                        "Primero debes entrenar un modelo en la pesta√±a 'üèãÔ∏è Entrenamiento'.")
                elif st.session_state.get('tree_type', 'Clasificaci√≥n') == "Clasificaci√≥n":

                    # Crear un nuevo modelo entrenado solo con las 2 caracter√≠sticas seleccionadas
                    # para que sea compatible con DecisionBoundaryDisplay
                    try:
                        model_2d = DecisionTreeClassifier(
                            max_depth=getattr(
                                st.session_state.tree_model, 'max_depth', None),
                            min_samples_split=getattr(
                                st.session_state.tree_model, 'min_samples_split', 2),
                            criterion=getattr(
                                st.session_state.tree_model, 'criterion', 'gini'),
                            random_state=42
                        )

                        plot_decision_boundary(
                            model_2d,
                            st.session_state.X_train,
                            st.session_state.y_train,
                            st.session_state.feature_names,
                            st.session_state.class_names
                        )
                    except Exception as e:
                        st.error(
                            f"Error al mostrar la visualizaci√≥n de frontera de decisi√≥n: {str(e)}")
                        st.info("""
                        La frontera de decisi√≥n requiere:
                        - Un modelo de clasificaci√≥n entrenado
                        - Exactamente 2 caracter√≠sticas para visualizar
                        - Datos de entrenamiento v√°lidos
                        """)
                        st.exception(
                            e)  # Mostrar detalles del error para debugging
                else:
                    st.warning(
                        "La visualizaci√≥n de frontera de decisi√≥n solo est√° disponible para modelos de clasificaci√≥n.")

            elif viz_type == "ROC":
                # Verificar que es un modelo de clasificaci√≥n y que est√° entrenado
                if not st.session_state.get('is_trained', False):
                    st.warning(
                        "Primero debes entrenar un modelo en la pesta√±a 'üèãÔ∏è Entrenamiento'.")
                elif st.session_state.get('tree_type', 'Clasificaci√≥n') == "Clasificaci√≥n":
                    try:
                        # Obtener probabilidades de predicci√≥n
                        y_pred_proba = st.session_state.tree_model.predict_proba(
                            st.session_state.X_test)

                        # Mostrar curvas ROC
                        plot_roc_curve(
                            st.session_state.y_test,
                            y_pred_proba,
                            average="macro",
                            class_names=st.session_state.class_names
                        )

                    except Exception as e:
                        st.error(f"Error al mostrar las curvas ROC: {str(e)}")
                        st.info("""
                        Las curvas ROC requieren:
                        - Un modelo de clasificaci√≥n entrenado
                        - Datos de prueba v√°lidos
                        - Modelo con m√©todo predict_proba
                        """)
                        st.exception(e)
                else:
                    st.warning(
                        "Las curvas ROC solo est√°n disponibles para modelos de clasificaci√≥n.")

            elif viz_type == "Residuos":
                model = st.session_state.tree_model
                X_test = st.session_state.X_test
                y_test = st.session_state.y_test
                y_pred = model.predict(X_test)

                # Crear visualizaciones con mejor tama√±o
                st.markdown("### üìä Gr√°fico de Predicciones vs Valores Reales")
                plot_predictions(y_test, y_pred)

                # Gr√°fico de residuos
                st.markdown("### üìà An√°lisis de Residuos")
                plot_residuals(y_test, y_pred)

            elif viz_type == "Superficie":
                model_2d = DecisionTreeRegressor(
                    max_depth=st.session_state.max_depth,
                    min_samples_split=st.session_state.min_samples_split,
                    criterion=st.session_state.criterion,
                    random_state=42
                )
                X_train = st.session_state.X_train
                y_train = st.session_state.y_train
                feature_names = st.session_state.feature_names
                # Superficie de predicci√≥n
                plot_decision_surface(
                    model_2d, feature_names, X_train, y_train)

    ###########################################
    # Pesta√±a de Caracter√≠sticas              #
    ###########################################
    elif st.session_state.active_tab == 4:
        st.header("Importancia de Caracter√≠sticas")

        if not st.session_state.get('is_trained', False):
            st.warning(
                "Primero debes entrenar un modelo en la pesta√±a 'üèãÔ∏è Entrenamiento'.")
        else:
            # Mostrar importancia de caracter√≠sticas
            display_feature_importance(
                st.session_state.tree_model,
                st.session_state.feature_names,
                X_test=st.session_state.get('X_test', None),
                y_test=st.session_state.get('y_test', None),
                task_type=st.session_state.get('tree_type', 'Clasificaci√≥n')
            )

    ###########################################
    # Pesta√±a de Predicciones                 #
    ###########################################
    elif st.session_state.active_tab == 5:
        st.header("üîÆ Predicciones con Nuevos Datos")

        if not st.session_state.get('is_trained', False):
            st.warning(
                "Primero debes entrenar un modelo en la pesta√±a 'üèãÔ∏è Entrenamiento'.")
        else:
            # Interfaz para hacer predicciones
            create_prediction_interface(
                st.session_state.tree_model,
                st.session_state.feature_names,
                st.session_state.class_names,
                st.session_state.get('tree_type', 'Clasificaci√≥n'),
                # Pasar datos de entrenamiento para rangos din√°micos
                st.session_state.get('X_train', None),
                # Pasar nombre del dataset para metadata
                st.session_state.get('selected_dataset', 'Titanic')
            )

    ###########################################
    # Pesta√±a de Exportar Modelo              #
    ###########################################
    elif st.session_state.active_tab == 6:
        st.header("Exportar Modelo")

        if not st.session_state.get('is_trained', False):
            st.warning(
                "Primero debes entrenar un modelo en la pesta√±a 'üèãÔ∏è Entrenamiento'.")
        else:
            # Opciones para exportar el modelo
            display_model_export_options(
                st.session_state.tree_model,
                st.session_state.feature_names,
                st.session_state.class_names,
                st.session_state.get('tree_type', 'Clasificaci√≥n'),
                st.session_state.get('max_depth', 3),
                st.session_state.get('min_samples_split', 2),
                st.session_state.get('criterion', 'gini')
            )
